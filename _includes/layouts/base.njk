<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		
		{#- Performance optimizations #}
		<meta name="color-scheme" content="light dark">
		<meta name="theme-color" content="#04143a" media="(prefers-color-scheme: light)">
		<meta name="theme-color" content="#1a1a1a" media="(prefers-color-scheme: dark)">
		
		{#- SEO and Social Media #}
		<meta property="og:title" content="{{ title or metadata.title }}">
		<meta property="og:description" content="{{ description or metadata.description }}">
		<meta property="og:type" content="{% if tags %}article{% else %}website{% endif %}">
		<meta property="og:url" content="{{ metadata.url }}{{ page.url }}">
		<meta property="og:site_name" content="{{ metadata.title }}">
		<meta name="twitter:card" content="summary">
		<meta name="twitter:title" content="{{ title or metadata.title }}">
		<meta name="twitter:description" content="{{ description or metadata.description }}">
		
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="canonical" href="{{ metadata.url }}{{ page.url }}">

		{#- Favicon and web manifest links #}
		<link rel="icon" type="image/x-icon" href="/favicon.ico">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="manifest" href="/site.webmanifest">

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}
		{#- Add the contents of a file to the bundle #}
		<style>{% include "css/index.css" %}</style>
		{#- Or you can add from node_modules #}
		{# <style>{% include "node_modules/prismjs/themes/prism-okaidia.css" %}</style> #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		<script type="module">{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}</script>
	</head>
	<body>
		<a href="#main" id="skip-link" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>

			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				{%- for entry in collections.all | eleventyNavigation %}
					<a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>/{{ entry.title }}</a>
				{%- endfor %}
				<button class="theme-toggle" id="theme-toggle" aria-label="Toggle between light, dark, and auto themes" title="Click to cycle through themes">
					<span class="theme-text">theme</span>
				</button>
			</nav>
		</header>

		<main id="main">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<em><a href="/readme">README.md</a></em>
		</footer>

		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
		
		{# Dark mode toggle functionality #}
		<script>
			// Dark mode toggle functionality
			(function() {
				const themeToggle = document.getElementById('theme-toggle');
				const html = document.documentElement;
				
				// Get stored theme or default to system preference
				const getStoredTheme = () => localStorage.getItem('theme');
				const getSystemTheme = () => window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				
				const setTheme = (theme) => {
					if (theme === 'auto') {
						html.removeAttribute('data-theme');
						localStorage.removeItem('theme');
					} else {
						html.setAttribute('data-theme', theme);
						localStorage.setItem('theme', theme);
					}
				};
				
				const toggleTheme = () => {
					const currentTheme = getStoredTheme();
					const systemTheme = getSystemTheme();
					
					if (!currentTheme) {
						// No stored preference, so toggle opposite of system
						setTheme(systemTheme === 'dark' ? 'light' : 'dark');
					} else if (currentTheme === 'light') {
						setTheme('dark');
					} else {
						setTheme('auto'); // Remove override, go back to system
					}
				};
				
				// Initialize theme on page load
				const initTheme = () => {
					const storedTheme = getStoredTheme();
					if (storedTheme) {
						html.setAttribute('data-theme', storedTheme);
					}
				};
				
				// Event listeners
				themeToggle?.addEventListener('click', toggleTheme);
				
				// Listen for system theme changes
				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
					// Only auto-update if user hasn't set a preference
					if (!getStoredTheme()) {
						// Theme will automatically update via CSS
					}
				});
				
				// Initialize
				initTheme();
			})();
		</script>
	</body>
</html>
